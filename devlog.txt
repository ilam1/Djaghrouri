+Team Djaghrouri
+Bayan Berri
+Irene Lam
+Jason Lam
+pd 5
+---------------------
+Jeopardy!
+
+devlog--
+Use keyboard shortcut to jump to end,
+ replicate entry template,
+ modify appropriately.
+
+zone of reflection--
+Flesh out each category whenever necessary, appropriate.
+ Need not be fully filled in until end of project,
+ but best done as you go along.
+
+
+/////////// Zone of Reflection \\\\\\\\\\\
+------------------------------------------
+OBSTACLES OVERCOME
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
wow we so BOSS bc...
+We got a temporary jeopardy game to work!! 
+Our Board wouldn't update the point values to 0 after they were played. This is because the board was being printed in toString each time and recreated each time. our toString in essence didn't just print it. It also repopulated it but we got it to work!!
+ We kept getting an error about in.readLine(). We fixed this error by implementing Keyboard.java instead. 
+ Utilized both try/ catch blocks and while loops as a precaution to bad input (There's more than one way to skin a cow!)
+ We finally managed to have the board print out lining up with the categories
+In order for the user to create their own jeopardy game we created a class called Custom.java which also extends Category, and created methods that populate the questions, answers, and category arrays. 

+UNRESOLVED ISSUES
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ As opposed to our original beliefs, the current version only supports a single player. To incorporate a multi-player/ team status (as
originally intended) we need to keep track of which player is currently playing throughout the code.
+How to add color
+How to create a new file in order to let the user make their own game.
+How to implement a timer
+The leaderboard is not working correctly. When a player gets a question right they get the points for the first turn but by the second turn it updates the wrong player's point value. 
+(Personal issue of Irene) Commits made from home are recognized as commits by an exterior account, and not under the ilam1 github account 
  + Update: Words of advice from PATRICK CHAN resolved this issue as of 1/21/17

+COOL STUFF LEARNED
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ The various errors and exceptions that Java hosts, each catering to the very numerous errors we produce. 
+ Do while loop (evaluates the boolean at the end)
+ (Through COMPLETE experimentation), catches can be stacked, e.g.
        try {
            totalPlayers = Integer.parseInt(in.readLine());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (NumberFormatException e) {
	    e. printStackTrace();
	}	
+ Formatted printing (System.out.printf)	

+MID-DEVELOPMENT DESIGN CHANGES
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ We changed our plan to use early exit bubble sort for sorting the ranks of the players because
 we will only have a small amount of players so which ever sort we use wouldn't really matter. 
+ We replaced All or Nothing! and Bet! with Final Jeopardy, triggered only when players acheive a tie
+ We removed Special Edition Jeopardy and Double Jeopardy

+LESSONS LEARNED
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ String.parseString(string) does not exist (a.k.a. the coding is more thinking than doing)
+ Abstract classes cannot have abstract instance variables.
+ the trim operator removes the spaces which we had a lot of after each string category.
+ Having descriptive comments, especially when working in a group, is quite resourceful.
+ Incorporating modular design is much much easier to follow than having one method that contains hundreds of lines of code.
+ Looking back at other homeworks can really help. You never know when you can incorporate methods that you've already coded. 

+ ______   ______   __   __   __       ______   _______     
+/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
+\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__  
+ \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\ 
+  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/ 
+   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \ 
+    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/ 
+==============================================================
+
+
+==============================================================
+2017-01-08 and before
+--------------------------------------------------------------
+Together :: We worked on our game proposal.
+==============================================================
+2017-01-09
+--------------------------------------------------------------
+Together :: We worked on the UML diagram and planned out the types of questions for each game. We also augmented our game proposal with more Solidifies (e.g. using bubbleSort in our game algorithm). 
+==============================================================
+2017-01-10
+--------------------------------------------------------------
+Together :: We discussed the deadlines in our todo.txt and their corresponding components and worked on the flowchart. 

+Bayan::

+Irene :: 
    +Woo.java was created and filled it with numerous imports, instance variables, and must have methods (e.g. something that prints the array). 
    +The game section was also updated with print statements that go from Loading... (for suspense) to the players name. 
    +Game elements of todo.txt were further detailed (e.g. the necessary components for Jeopardy! to run). 
    +The diagram representation of the algorithm that allows the user to create their own game was added to the flow chart.

+Jason :: 
    + Typed up most of the flowchart leading up to the running of the game
    + The steps for when the user chooses to directly play the game were added to the flow chart.
+==============================================================
+2017-01-11
+--------------------------------------------------------------
+Bayan,Jason::
+Worked on the final methods of Woo.java at the CSDojo. We planned out how to calculate the points and how to check if the answers that the user inputs are correct.

+Bayan :: 
    +I created a file for each subclass of Game.java including Math.java, Misc.java, History.java, and Sci.java-- all of which extend Woo.java
and filled math, Misc, and History with potential question and answer ideas for the methods.
    +I also started writing up questions for math and planning which would be easier(less points) and which would be harder (more points). 
    +Created an example board on paper so that it would be easier to visualize.
    +Added .gitignore to the github repository. 

+Irene ::
    + Fine tuning (fixed mistakes from all previous coding) such that the skeleton is now RUNNING (up until categories are asked)
    + Added main and necessary try/catch blocks
    + Fixed syntax errors (especially in method newGame() )
    + Updated instance variables (i.e. categories that contains the categories, diffPoints for use when the user is allowed to create the game) 
+Jason ::
    + Finished function sortRank, as the points in point array is sorted, so is the player names in the playerNames array, maintaining
  linearity between the two.
+==============================================================
+2017-01-12
+--------------------------------------------------------------
Bayan, Irene, Jason :: Today in class we continued working on Woo.java. We made it so that the user can also choose the point value. and incorporated the questions of each subclass. 
+Bayan ::
    + Went through and resolved every error in the version of Woo.java that we pushed during class.
    + Fixed it so that we have separate methods that will populate board and print it.
    + added a filler array for each subclass, and made the question and answer arrays static.
    + Added methods to populate the arrays and added return statements for sample questions, this was later modified into sample arrays for the MVP.
    + implemented Keyboard.java methods throughout Woo.java. 
+Irene ::
    + Removed point value from the printed Jeopardy board upon selecting the question and point (and answering the question correctly)
    + Removed point value from the points selection (after choosing a category, and after answering the question correctly)
    + Removed category from category selection when all questions in the category are answered correctly
    + Added while loop that prevents bad input
+Jason ::
    + Created new simple UML diagram for our MVP(min viable product).
+==============================================================
+2017-01-13
+--------------------------------------------------------------
Together::
+Bayan ::
+Irene :: 
       + Added questions and answers to Misc.java
       + Created two more subclasses (Stuy.java and Literature.java) and made them aware to Woo.java
+Jason :: <Thing member did.>
+==============================================================
+2017-01-14
+--------------------------------------------------------------
+Bayan, Jason ::
       + Worked on woo so that categories to be displayed on the board are randomly chosen from categories array
       + Kept running into errors due to recurrence of same category, but finally resolved
+Bayan ::
       + Worked on making the Questions correspond with the randomly generated boad
       + Worked on making the answers correspond with the questions as well. 
+Irene :: 
       + Created five more subclasses (Cheese.java, Geography.java, China.java, Impossible.java (containing various fun facts), and CompSci.java)
+Jason ::
+==============================================================
+2017-01-15
+--------------------------------------------------------------
+Bayan ::
       +Created many more categories.
       +Added questions for Women.java and more.
       +included them in Woo.java
       + Finished adding questions for the remaining 3 categories.
       + Added all the categories to Woo and made sure it ran free of mistakes/ fixed syntax along the way.
       + Moved multiple parts of the newGame method and created other methods that will be called. aka Modular design
       + This will hopefully make our code much easier to understand.
       + Added the Food category and questions to make it an even 25 categories.
+Irene :: 
+Jason ::
       + Added questions for multiple subclasses of Woo
+2017-01-16
+--------------------------------------------------------------
+Bayan ::
+Irene :: 
       + Added Category.java for future use to host an abstract method
       + Added Food.java (waiting on Bayan's addition)
       + Added ??? as a placeholder for the 25th category (selecting it as a category is allowed, although the question shows as string "***Encrypted Message***" without a message)
       + Added two options to Woo.java after player names are are recorded
         1 being randomize (already coded)
       + 2 allowing the user to select 5 categories from a list of 25 (newly added) 
       + When selecting the categories, the user types the word (case insensitive)
       + Modified private String array Categories to more accurately represent the categories (e.g. Geography instead of Geo, which could also symbolize Geometry)
       + Modified printQues and checkAns to display questions and confirm answers based on the aforementioned changes
       + Modified the appearance of printing in order to make more sense to the user (e.g. instructions to pick a point value comes after the jeopardy board is printed and before the point values)
       + Modified the board's formatting such that everything is aligned/ centered
       + Fixed the 50+ syntax errors along the way
+Jason :: 
+==============================================================       
+2017-01-17
+--------------------------------------------------------------
+Bayan, Irene::
       + Incorporated abstract methods into Category.java
+Bayan ::
       +Added Food.java
+Irene ::
       + Added new instance variable buzzer to accomodate the newly added buzzer (recorded after the user inputs their name)
       + Added conditionals and necessary try catch blocks to prevent the selection of a buzzer already taken
       + Wrote method whichPlayer to return the index of the player based on the String first buzzed
       + Added conditionals to take into account various features when displaying messages (e.g. number of players)
       + Added new introductory messages to more accurately resemble the television Jeopardy! show
+Jason :: 
+==============================================================       
+2017-01-18
+--------------------------------------------------------------
+Bayan ::
       + Fixed minor syntax errors.
       + changed instance variables of class category
       	 +Abstract classes can't have abstract instance variables. 
+Irene ::
       + Implemented buzzer!
          + Buzzers greater than one character will return a unique error message
          + (WITH LOTS OF HELP FROM PATRICK CHAN) Buzzers already used by another user will return a unique error message
          + "Buzzing in" follows the display of each question, resolving our issue of which player ought to answer the question
          + A buzzer will continue to be asked until a character that will not trigger the aforementioned error messages is given
       + Modified the game for single players (where the total number of players = 1)
          + The buzzer prompt will not be triggered (neither asking for the player's desired buzzer nor needing to buzz in for questions)
          + Answering a question wrong discards the question from the board, stimulating instead a slot (to be implemented) with the
            answer to both let the user learn and give the user a chance to clear the board
       + Spacing and emojis are now added to make the Jeopardy! board more readable/ interesting
       + Error involving subclass Literature (not printing questions/ answers) was fixed
       
+Jason :: 
+==============================================================
+2017-01-19
+--------------------------------------------------------------
Together::
+Bayan ::
       + Started implementing more modular design so that the code is more readable and easier to understand. This will also hopefully make it easier to see any mistakes or add parts to the code. descriptive variable names and methods will also make it easier to continue working off our partners' code
       + Added the class Custom that will allow the user to customize their own game.
       + Added the 11 different methods to populate the eleven different instance variables for Custom.java
       	 + then realized I could just use arrayname as a parameter where arrayname is: Custom.___
	 + Shortened 11 methods to 3 methods, one for answers, one for questions, and one for category
       + Added short mostly multiline descriptive comments preceding most methods.
+Irene :: 
       + Returns the correct answer when a single player gives a wrong answer
       + Fixed NullPointerException/ error to buzzer triggering for single players
       + More catching (e.g. NumberFormatException when inputting number of players)
       + Now shows a leaderboard! (for multiplayers) and plain points for single players
       	 + Increments/ Decrements points based on a player's answers
	 + Prints rankings in descending order (previously made)
       + Added comments for single players (the literal type, where good performance is applauded, bad performance not so much)
+Jason :: 
       + Added nature category with questions for a round number of 25 categories to choose from
       + Went to dojo and added functionality where user can create their own categories and make their own questions
       + Updated flowchart to reflect current state of things
       + Updated uml diagram to reflect current state of things
       + Updated README.md to reflect current state of things, might change in future again
+==============================================================
+2017-01-20
+--------------------------------------------------------------
Together::
+Bayan ::
       +debugging
       +added a parameter to make ques and answer so that it would change. 
+Irene ::
       + Rewrote sortRank
       	 + Based on selectionSort instead or original plannings of bubbleSort
	 + Does not modify instance variables, but instead prints the leaderboard in descending order (and in doing so resolves numerous 
	   issues we had (e.g. only player 1's points being actively changed, returning player 2 when player 2 buzzed)
       + When "creating your own game," the answer to a question is asked immediately after asking the question, instead of asking for all the questions then all the answers
       + Colors are now possible! (Not yet completely implemented because of deliberations between purple/pink or cyan)
+Jason :: 
	+ Fixed some small errors with user created game
+==============================================================
+2017-01-21
+--------------------------------------------------------------
Together::
+Bayan ::
+Irene ::
       + Now prints the answer for multiplayers if everyone answers incorrectly
       + Implemented "buzzer" keyword!! (For the forgetful. And the unconfident. And everyone in general.)
         + Accepted when the code prompts for a buzzer (e.g. Playing players buzz again! Not sure? Don't remember? Type \"Buzzer\".\n)
	 + Adapts to playing players (e.g. does not show the buzzer of a player that answered the question incorrectly)
	 + Usable for a customized game and pre-written game alike
       + When a question is asked, everyone is forced to answer the question
       + The last player (who is the only one among total players who has yet to buzz in) does not need to buzz in
       + FINAL JEOPARDY! newly written and functional (called when there is a tie for the highest points)
         + Uses ArrayList to keep track of Final Jeopardy players and their respective buzzers
	 + Prints all necessary instructions
	 + Checks the question with the answer
	 + Uses a time interval (Thread.sleep) to add suspense
	 + Keeps track of input and increments/ decrements points depending on the user's answers
	 + Announces the winner at the end and ends the game
+Jason :: 
	+ Reupdated flow and uml to actually reflect current state of things
+==============================================================
+2017-01-23
+--------------------------------------------------------------
+Bayan ::
+Irene ::
	+ Various bugs were fixed in the case of single players
	+ Fixed issues with Final Jeopardy when the user creates their own game
	+ Final Jeopardy question was changed to be more answerable and relevant to the previous game experience
	+ Changed comments to be more logical
	+ Contributed to the theoretical changes of the UML diagram, Flow chart, and color schemes
+Jason :: 
	+ Added colors to EVERYTHING
	+ More visually appealing
	+ Updated FINAL changes to flow and uml to FINALLY reflect current state of things
	+ Added a last subclass, ART, for a round number of 25 categories
+==============================================================

